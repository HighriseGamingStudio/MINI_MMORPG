//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/Input/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Global"",
            ""id"": ""1a6e39e8-3698-48dc-90d5-c186428dfba3"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""86cded87-299c-4f9e-8dc3-548a9188c7df"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""3e6bc588-1a59-4806-815c-63ec9b8e0c44"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""63729686-ad93-4bc6-a70f-ed6b725ac952"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a69cf1af-a955-45be-9700-7339a3f1c740"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""30405980-1865-4480-82cd-ac2328adbb72"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""8867c063-de4c-481e-b1ec-e85ac5982185"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65bbe068-6723-42af-950f-900b3a2003f7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f3ce75f1-32b6-43f5-9f37-55b12f1b2697"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""PointerFree"",
            ""id"": ""d8a28d8a-3a6c-44d7-a59b-8428a9603013"",
            ""actions"": [
                {
                    ""name"": ""Pointer"",
                    ""type"": ""Value"",
                    ""id"": ""373fc1b6-94bc-4050-a750-fe1476a9a80d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""0e9d42dc-2872-4b6c-8aaf-0d45ee577049"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5bda2dbf-0445-4300-bce7-b3cedcbb394e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Keyboard LR"",
                    ""id"": ""b4e58796-747b-49b5-a426-b5be7775add4"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""59006462-804f-42a5-9a3e-0606d454e5e8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""08f6dbc7-8beb-42c1-8245-3e72564873ed"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Global
        m_Global = asset.FindActionMap("Global", throwIfNotFound: true);
        m_Global_Move = m_Global.FindAction("Move", throwIfNotFound: true);
        m_Global_Jump = m_Global.FindAction("Jump", throwIfNotFound: true);
        // PointerFree
        m_PointerFree = asset.FindActionMap("PointerFree", throwIfNotFound: true);
        m_PointerFree_Pointer = m_PointerFree.FindAction("Pointer", throwIfNotFound: true);
        m_PointerFree_Look = m_PointerFree.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Global
    private readonly InputActionMap m_Global;
    private IGlobalActions m_GlobalActionsCallbackInterface;
    private readonly InputAction m_Global_Move;
    private readonly InputAction m_Global_Jump;
    public struct GlobalActions
    {
        private @InputActions m_Wrapper;
        public GlobalActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Global_Move;
        public InputAction @Jump => m_Wrapper.m_Global_Jump;
        public InputActionMap Get() { return m_Wrapper.m_Global; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GlobalActions set) { return set.Get(); }
        public void SetCallbacks(IGlobalActions instance)
        {
            if (m_Wrapper.m_GlobalActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_GlobalActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_GlobalActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_GlobalActionsCallbackInterface.OnMove;
                @Jump.started -= m_Wrapper.m_GlobalActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_GlobalActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_GlobalActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_GlobalActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public GlobalActions @Global => new GlobalActions(this);

    // PointerFree
    private readonly InputActionMap m_PointerFree;
    private IPointerFreeActions m_PointerFreeActionsCallbackInterface;
    private readonly InputAction m_PointerFree_Pointer;
    private readonly InputAction m_PointerFree_Look;
    public struct PointerFreeActions
    {
        private @InputActions m_Wrapper;
        public PointerFreeActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pointer => m_Wrapper.m_PointerFree_Pointer;
        public InputAction @Look => m_Wrapper.m_PointerFree_Look;
        public InputActionMap Get() { return m_Wrapper.m_PointerFree; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PointerFreeActions set) { return set.Get(); }
        public void SetCallbacks(IPointerFreeActions instance)
        {
            if (m_Wrapper.m_PointerFreeActionsCallbackInterface != null)
            {
                @Pointer.started -= m_Wrapper.m_PointerFreeActionsCallbackInterface.OnPointer;
                @Pointer.performed -= m_Wrapper.m_PointerFreeActionsCallbackInterface.OnPointer;
                @Pointer.canceled -= m_Wrapper.m_PointerFreeActionsCallbackInterface.OnPointer;
                @Look.started -= m_Wrapper.m_PointerFreeActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PointerFreeActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PointerFreeActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PointerFreeActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Pointer.started += instance.OnPointer;
                @Pointer.performed += instance.OnPointer;
                @Pointer.canceled += instance.OnPointer;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PointerFreeActions @PointerFree => new PointerFreeActions(this);
    public interface IGlobalActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IPointerFreeActions
    {
        void OnPointer(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
